/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* s, TreeNode* t){
        // 同时到达底部，说明匹配成功
        if(s==NULL && t==NULL)
            return true;
        // 有一个到底部，另一个没有，匹配不成功
        if((s==NULL && t!=NULL) || (s!=NULL && t==NULL))
            return false;
        // 值相等，还需继续判断他们左右子树是否相等
        if(s->val==t->val && isSameTree(s->left,t->left) && isSameTree(s->right,t->right)){
            return true;
        }
        // 这一步最容易忘记，isSameTree不直接返回问题结果，只是用来判断第32行条件是否成立
        // 如果到最后都没有返回true，那就不匹配
        return false;
    }
    bool isSubtree(TreeNode* s, TreeNode* t) {
        //如果s为空，说明已经遍历到底部了还没判断出来就是不匹配
        if(s==NULL)
            return false;
        //如果找到一个公共节点相等的，继续判断他们的左右子树是否相等
        if(s->val==t->val && isSameTree(s,t)){
            return true;
        // 如果没有找到相等节点值，继续向左和向后节点遍历寻找，只要有一个成立就行
        }else{
            return (isSubtree(s->left,t) || isSubtree(s->right,t));
        }
        //找到最后还没找到就是不匹配喽
        return false;
    }
};
